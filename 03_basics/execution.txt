# JavaScript Code Execution Notes

## 1. JavaScript Execution Context
- JavaScript runs in an execution context, which can be global or function-specific.
- Each execution context has a variable environment, scope chain, and `this` value.
-three types:global execution context,function execution context,eval execution context

## 2. Stages of Code Execution
- **Creation Phase**: Memory is allocated for variables and functions. Hoisting occurs.
                      variable->undefined
                      function->definition
- **Execution Phase**: Code is executed line by line.

## 3. Hoisting
- Variable and function declarations are hoisted to the top of their containing scope.
- Only declarations are hoisted, not initializations.

## 4. Call Stack
- JavaScript uses a call stack to manage function calls.
- When a function is called, a new execution context is created and pushed onto the stack.

## 5. Event Loop
- JavaScript is single-threaded, using an event loop to handle asynchronous operations.
- The event loop checks the call stack and the message queue to execute tasks.

## 6. Asynchronous Execution
- Functions like `setTimeout`, `Promises`, and `async/await` allow for non-blocking code execution.
- Callbacks are used to handle asynchronous results.

## 7. Scope and Closures
- Variables have function scope or block scope (with `let` and `const`).
- Closures allow inner functions to access outer function variables even after the outer function has executed.

## 8. Debugging
- Use `console.log()` to output values and track execution flow.
- Browser developer tools provide debugging features like breakpoints and step-through execution.

## 9. Best Practices
- Write clean, readable code with proper indentation.
- Use meaningful variable names and comments for clarity.
- Test code frequently to catch errors early.

## Conclusion
Understanding the execution of JavaScript code is crucial for effective programming and debugging.